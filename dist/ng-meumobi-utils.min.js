(function() {
	'use strict';

	angular
	.module('ngMeumobi.Utils.socialSharing', [])
	.factory('meuSocialSharing', ['$q', '$window', 'striptagsFilter', 'br2nlFilter', '$log', meuSocialSharing]);
  
  /*
    cordova plugin add https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin
  */
  
  function meuSocialSharing($q, $window, striptags, br2nl, $log) {
    
    var service = {};
    var options = {
      postfix: ''
    };
    
    service.shareItem = shareItem;
    service.shareMedia = shareMedia;
    service.setOption = setOption;
    service.setOptions = setOptions;
    service.share = share;
    
    return service;

    function setOptions(options) {
      angular.extend(options, options);
    }

    function setOption(name, value) {
      options.postfix = value;
    }

		function shareItem(item) {
			
			var params = {
			  message: item.description,
        subject: item.title,
        files: [],
        url: item.hasOwnProperty('link') ? item.link : null
			};

      if (item.thumbnails.length > 0) {
				params.files.push(item.thumbnails[0].url);
			}

			return share(params);
		}

		function shareMedia(media) {

			var params = {
			  message: media.title,
        subject: media.title,
        files: [],
        url: media.url
			};
			
			// If media is saved locally (media.path) then share it
			// Else share its link (media.url)
			// Couldn't share together local pdf and link
			if (media.hasOwnProperty('path')) {
				params.files.push(media.path);
				params.url = null;
			} else if (media.thumbnails.length > 0) {
				params.files.push(media.thumbnails[0].url);
			}
			
			return share(params);
		}
		
		function share(params) {
    /*
      this is the complete list of currently supported params you can pass to the plugin (all optional)
      var options = {
        message: 'share this', // not supported on some apps (Facebook, Instagram)
        subject: 'the subject', // fi. for email
        files: ['', ''], // an array of filenames either locally or remotely
        url: 'https://www.website.com/foo/#bar?a=b',
        chooserTitle: 'Pick an app' // Android only, you can override the default share sheet title
      }
    */
      $log.debug(params);
      var d = $q.defer();			
      var social = $window.plugins && $window.plugins.socialsharing;
      
      // If params.description is null
    
			if (social) {
        if (options.postfix) {
          $log.debug('Postfix: ' + options.postfix);
  				// params.message += options.postfix;
  				params.subject += options.postfix;
        }
      
        params.message = params.message && striptags(br2nl(params.message));
        params.subject = params.subject && striptags(br2nl(params.subject));

        var cb_share = {
          success: function(result) {
            d.resolve(result);
          },
          fail: function(msg) {
            d.reject(msg);
          }  
        };
        
        $log.debug(params);
        social.shareWithOptions(params, cb_share.success, cb_share.fail); 
			} else {
			  d.reject('Plugin socialsharing missing');
			}
      
      return d.promise;
		}
  }
})();
(function() {
	'use strict';

	loadingInterceptor.$inject = ["$q", "$rootScope", "$log"];
	angular
	.module('ngMeumobi.Utils.loading', [])
	.factory('loadingInterceptor', loadingInterceptor);
	
	function loadingInterceptor($q, $rootScope, $log) {
		
		var numLoadings = 0;
		
		return {
			request: function(config) {
        if (!numLoadings++) {
          $rootScope.$broadcast('loading:start');
        }

				return config || $q.when(config);
			},
			response: function(response) {
				if (!(--numLoadings)) {
					$rootScope.$broadcast('loading:stop');
				}

				return response || $q.when(response);
			},
			requestError: function(request) {
				if (!(--numLoadings)) {
					$rootScope.$broadcast('loading:stop');
				}

				return $q.reject(request);
			},
			responseError: function(response) {
				if (!(--numLoadings)) {
					$rootScope.$broadcast('loading:stop');
				}
				
				return $q.reject(response);
			}
		};
	}
})();

(function() {
	'use strict';

	angular
	.module('ngMeumobi.Utils.calendar', [])
	.factory('meuCalendar', ['$q', '$window', 'striptagsFilter', 'br2nlFilter', meuCalendar]);
  
  /*
    cordova plugin add https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin.git
    If start and end_date equal 00:00 then the event occurs all day long
  */
  
  function meuCalendar($q, $window, striptags, br2nl) {
    
    var service = {};
    
    service.createEventInteractively = createEventInteractively;
    
    return service;
    
    function createEventInteractively(options) {
      var d = $q.defer(),
        defaultOptions = {
          title: null,
          address: null,
          description: '',
          start_date: null,
          end_date: null
        };

      defaultOptions = angular.extend(defaultOptions, options);

      $window.plugins.calendar.createEventInteractively(
        striptags(defaultOptions.title),
        striptags(defaultOptions.address),
        striptags(br2nl(defaultOptions.description)),
        new Date(defaultOptions.start_date  * 1000),
        new Date(defaultOptions.end_date  * 1000),
        function (message) {
          d.resolve(message);
        }, function (error) {
          d.reject(error);
        }
      );

      return d.promise;
    }
  }
})();
(function() {
	'use strict';
  
	googleAnalyticsCordova.$inject = ["$cordovaGoogleAnalytics", "$log"];
	googleAnalytics.$inject = ["$log", "$q"];
  $cordovaGoogleAnalytics.$inject = ["$q", "$window", "$log"];
	meuAnalytics.$inject = ["$injector", "$window"];
	angular
	.module('ngMeumobi.Utils.analytics', [])
	.factory('googleAnalyticsCordova', googleAnalyticsCordova)
	.factory('googleAnalytics', googleAnalytics)
  .factory('$cordovaGoogleAnalytics', $cordovaGoogleAnalytics)
	.factory('meuAnalytics', meuAnalytics);
  
  /*
    Inspired by ngCordova
    We've extracted only required methods 
  
    install   :     cordova plugin add https://github.com/danwilson/google-analytics-plugin.git
  */

  function $cordovaGoogleAnalytics($q, $window, $log) {
    
    var service = {};
    
    service.startTrackerWithId = startTrackerWithId;
    service.debugMode = debugMode;
    service.trackView = trackView;
    service.trackEvent = trackEvent;
    service.setUserId = setUserId;
    
    return service;

    function setUserId(id) {
      var d = $q.defer();

      $log.debug('Set User Id: ' + id);
      
      $window.analytics.setUserId(id, function (response) {
        d.resolve(response);
      }, function (error) {
        d.reject(error);
      });

      return d.promise;
    }

    function startTrackerWithId(id) {
      var d = $q.defer();

      $log.debug('Start tracking GA Id: ' + id);

      $window.analytics.startTrackerWithId(id, function (response) {
        d.resolve(response);
      }, function (error) {
        d.reject(error);
      });

      return d.promise;
    }

    function debugMode() {
      var d = $q.defer();

      $window.analytics.debugMode(function (response) {
        d.resolve(response);
      }, function () {
        d.reject();
      });

      return d.promise;
    }

    function trackView(screenName) {
      var d = $q.defer();
      
      $log.debug('Track View: ' + screenName);
      
      $window.analytics.trackView(screenName, function (response) {
        d.resolve(response);
      }, function (error) {
        d.reject(error);
      });

      return d.promise;
    }

    function trackEvent(category, action, label, value) {
      var d = $q.defer();

      var ev = [category, action, label, value];
      $log.debug('Track Event: ' + ev.toString());
      
      $window.analytics.trackEvent(category, action, label, value, function (response) {
        d.resolve(response);
      }, function (error) {
        d.reject(error);
      });

      return d.promise;
    }
  }
		
	function googleAnalyticsCordova($cordovaGoogleAnalytics, $log) {
    
    var service = {};
    
    service.init = init;
    service.debugMode = $cordovaGoogleAnalytics.debugMode;
    service.trackView = $cordovaGoogleAnalytics.trackView;
    service.trackEvent = $cordovaGoogleAnalytics.trackEvent;
    service.startTrackerWithId = $cordovaGoogleAnalytics.startTrackerWithId;
    service.setUserId = $cordovaGoogleAnalytics.setUserId;
    
    return service;
    
    function init(trackId) {
      $cordovaGoogleAnalytics.startTrackerWithId(trackId);
    }
	}
  
	function googleAnalytics($log, $q) {
    
    var service = {};
    
    service.init = init;
    service.debugMode = debugMode;
    service.trackView = trackView;
    service.trackEvent = trackEvent;
    service.startTrackerWithId  = startTrackerWithId;
    service.setUserId = setUserId;
    
    return service;
    
    function init(trackId) {
      $log.debug('Google Analytics track Id: ' + trackId);
    }
    
    function debugMode() {
      $log.debug('Enable Debug');
    }
    
    function trackView(title) {
      $log.debug('Tracking Page: ' + title);
    }
    
    function trackEvent(category, action, label, value) {
      $log.debug('Tracking Event: ' + action);
    }
    
    function startTrackerWithId(id) {
      var msg = 'Tracking GA Id: ' + id;
      var d = $q.defer();

      d.resolve(msg);

      return d.promise;
    }
    
    function setUserId(id) {
      $log.debug('Tracking User: ' + id);
    }
	}
  
	function meuAnalytics($injector, $window) {

		if ($window.cordova) {
			return $injector.get('googleAnalyticsCordova');
		} else {
		  return $injector.get('googleAnalytics');
		}
	}
})();
/* global angular */
/* eslint no-undef: "error" */
(function () {
  'use strict';

  angular.module('ngMeumobi.Utils.filters', [])
  .filter('isEmpty', isEmpty)
  .filter('br2nl', br2nl)
  .filter('striptags', striptags);

  function isEmpty() {
    return function (obj) {
      return !Object.keys(obj).length;
    };
  }

  function br2nl() {
    return function (text) {
      return text.replace(/<br\s*[\/]?>/gi, '\n');
    };
  }

  function striptags() {
    return function (text) {
      return angular
          .element('<div/>')
          .html(text)
          .text();
    };
  }
})();

/* global angular */
/* eslint no-undef: "error" */
/*
  TODO: should release minified (.min.js) and not (.js)
*/
(function () {
  'use strict';

  angular.module('ngMeumobi.Utils', [
    //'ngMeumobi.Utils.files',
    //'ngMeumobi.Utils.api',
    'ngMeumobi.Utils.loading',
    //'ngMeumobi.Utils.connection',
    'ngMeumobi.Utils.calendar',
    'ngMeumobi.Utils.analytics',
    'ngMeumobi.Utils.socialSharing'
    //'ngMeumobi.Utils.filters'
  ]);
  
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNvY2lhbFNoYXJpbmcuanMiLCJMb2FkaW5nLmpzIiwiQ2FsZW5kYXIuanMiLCJBbmFseXRpY3MuanMiLCJtZXUtZmlsdGVycy5qcyIsIm1vZHVsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxDQUFBLFdBQUE7Q0FDQTs7Q0FFQTtFQUNBLE9BQUEsaUNBQUE7RUFDQSxRQUFBLG9CQUFBLENBQUEsTUFBQSxXQUFBLG1CQUFBLGVBQUEsUUFBQTs7Ozs7O0VBTUEsU0FBQSxpQkFBQSxJQUFBLFNBQUEsV0FBQSxPQUFBLE1BQUE7O0lBRUEsSUFBQSxVQUFBO0lBQ0EsSUFBQSxVQUFBO01BQ0EsU0FBQTs7O0lBR0EsUUFBQSxZQUFBO0lBQ0EsUUFBQSxhQUFBO0lBQ0EsUUFBQSxZQUFBO0lBQ0EsUUFBQSxhQUFBO0lBQ0EsUUFBQSxRQUFBOztJQUVBLE9BQUE7O0lBRUEsU0FBQSxXQUFBLFNBQUE7TUFDQSxRQUFBLE9BQUEsU0FBQTs7O0lBR0EsU0FBQSxVQUFBLE1BQUEsT0FBQTtNQUNBLFFBQUEsVUFBQTs7O0VBR0EsU0FBQSxVQUFBLE1BQUE7O0dBRUEsSUFBQSxTQUFBO0tBQ0EsU0FBQSxLQUFBO1FBQ0EsU0FBQSxLQUFBO1FBQ0EsT0FBQTtRQUNBLEtBQUEsS0FBQSxlQUFBLFVBQUEsS0FBQSxPQUFBOzs7TUFHQSxJQUFBLEtBQUEsV0FBQSxTQUFBLEdBQUE7SUFDQSxPQUFBLE1BQUEsS0FBQSxLQUFBLFdBQUEsR0FBQTs7O0dBR0EsT0FBQSxNQUFBOzs7RUFHQSxTQUFBLFdBQUEsT0FBQTs7R0FFQSxJQUFBLFNBQUE7S0FDQSxTQUFBLE1BQUE7UUFDQSxTQUFBLE1BQUE7UUFDQSxPQUFBO1FBQ0EsS0FBQSxNQUFBOzs7Ozs7R0FNQSxJQUFBLE1BQUEsZUFBQSxTQUFBO0lBQ0EsT0FBQSxNQUFBLEtBQUEsTUFBQTtJQUNBLE9BQUEsTUFBQTtVQUNBLElBQUEsTUFBQSxXQUFBLFNBQUEsR0FBQTtJQUNBLE9BQUEsTUFBQSxLQUFBLE1BQUEsV0FBQSxHQUFBOzs7R0FHQSxPQUFBLE1BQUE7OztFQUdBLFNBQUEsTUFBQSxRQUFBOzs7Ozs7Ozs7OztNQVdBLEtBQUEsTUFBQTtNQUNBLElBQUEsSUFBQSxHQUFBO01BQ0EsSUFBQSxTQUFBLFFBQUEsV0FBQSxRQUFBLFFBQUE7Ozs7R0FJQSxJQUFBLFFBQUE7UUFDQSxJQUFBLFFBQUEsU0FBQTtVQUNBLEtBQUEsTUFBQSxjQUFBLFFBQUE7O01BRUEsT0FBQSxXQUFBLFFBQUE7OztRQUdBLE9BQUEsVUFBQSxPQUFBLFdBQUEsVUFBQSxNQUFBLE9BQUE7UUFDQSxPQUFBLFVBQUEsT0FBQSxXQUFBLFVBQUEsTUFBQSxPQUFBOztRQUVBLElBQUEsV0FBQTtVQUNBLFNBQUEsU0FBQSxRQUFBO1lBQ0EsRUFBQSxRQUFBOztVQUVBLE1BQUEsU0FBQSxLQUFBO1lBQ0EsRUFBQSxPQUFBOzs7O1FBSUEsS0FBQSxNQUFBO1FBQ0EsT0FBQSxpQkFBQSxRQUFBLFNBQUEsU0FBQSxTQUFBO1VBQ0E7S0FDQSxFQUFBLE9BQUE7OztNQUdBLE9BQUEsRUFBQTs7OztBQ2xIQSxDQUFBLFdBQUE7Q0FDQTs7O0NBRUE7RUFDQSxPQUFBLDJCQUFBO0VBQ0EsUUFBQSxzQkFBQTs7Q0FFQSxTQUFBLG1CQUFBLElBQUEsWUFBQSxNQUFBOztFQUVBLElBQUEsY0FBQTs7RUFFQSxPQUFBO0dBQ0EsU0FBQSxTQUFBLFFBQUE7UUFDQSxJQUFBLENBQUEsZUFBQTtVQUNBLFdBQUEsV0FBQTs7O0lBR0EsT0FBQSxVQUFBLEdBQUEsS0FBQTs7R0FFQSxVQUFBLFNBQUEsVUFBQTtJQUNBLElBQUEsRUFBQSxFQUFBLGNBQUE7S0FDQSxXQUFBLFdBQUE7OztJQUdBLE9BQUEsWUFBQSxHQUFBLEtBQUE7O0dBRUEsY0FBQSxTQUFBLFNBQUE7SUFDQSxJQUFBLEVBQUEsRUFBQSxjQUFBO0tBQ0EsV0FBQSxXQUFBOzs7SUFHQSxPQUFBLEdBQUEsT0FBQTs7R0FFQSxlQUFBLFNBQUEsVUFBQTtJQUNBLElBQUEsRUFBQSxFQUFBLGNBQUE7S0FDQSxXQUFBLFdBQUE7OztJQUdBLE9BQUEsR0FBQSxPQUFBOzs7Ozs7QUN0Q0EsQ0FBQSxXQUFBO0NBQ0E7O0NBRUE7RUFDQSxPQUFBLDRCQUFBO0VBQ0EsUUFBQSxlQUFBLENBQUEsTUFBQSxXQUFBLG1CQUFBLGVBQUE7Ozs7Ozs7RUFPQSxTQUFBLFlBQUEsSUFBQSxTQUFBLFdBQUEsT0FBQTs7SUFFQSxJQUFBLFVBQUE7O0lBRUEsUUFBQSwyQkFBQTs7SUFFQSxPQUFBOztJQUVBLFNBQUEseUJBQUEsU0FBQTtNQUNBLElBQUEsSUFBQSxHQUFBO1FBQ0EsaUJBQUE7VUFDQSxPQUFBO1VBQ0EsU0FBQTtVQUNBLGFBQUE7VUFDQSxZQUFBO1VBQ0EsVUFBQTs7O01BR0EsaUJBQUEsUUFBQSxPQUFBLGdCQUFBOztNQUVBLFFBQUEsUUFBQSxTQUFBO1FBQ0EsVUFBQSxlQUFBO1FBQ0EsVUFBQSxlQUFBO1FBQ0EsVUFBQSxNQUFBLGVBQUE7UUFDQSxJQUFBLEtBQUEsZUFBQSxjQUFBO1FBQ0EsSUFBQSxLQUFBLGVBQUEsWUFBQTtRQUNBLFVBQUEsU0FBQTtVQUNBLEVBQUEsUUFBQTtXQUNBLFVBQUEsT0FBQTtVQUNBLEVBQUEsT0FBQTs7OztNQUlBLE9BQUEsRUFBQTs7OztBQzdDQSxDQUFBLFdBQUE7Q0FDQTs7Ozs7O0NBRUE7RUFDQSxPQUFBLDZCQUFBO0VBQ0EsUUFBQSwwQkFBQTtFQUNBLFFBQUEsbUJBQUE7R0FDQSxRQUFBLDJCQUFBO0VBQ0EsUUFBQSxnQkFBQTs7Ozs7Ozs7O0VBU0EsU0FBQSx3QkFBQSxJQUFBLFNBQUEsTUFBQTs7SUFFQSxJQUFBLFVBQUE7O0lBRUEsUUFBQSxxQkFBQTtJQUNBLFFBQUEsWUFBQTtJQUNBLFFBQUEsWUFBQTtJQUNBLFFBQUEsYUFBQTtJQUNBLFFBQUEsWUFBQTs7SUFFQSxPQUFBOztJQUVBLFNBQUEsVUFBQSxJQUFBO01BQ0EsSUFBQSxJQUFBLEdBQUE7O01BRUEsS0FBQSxNQUFBLGtCQUFBOztNQUVBLFFBQUEsVUFBQSxVQUFBLElBQUEsVUFBQSxVQUFBO1FBQ0EsRUFBQSxRQUFBO1NBQ0EsVUFBQSxPQUFBO1FBQ0EsRUFBQSxPQUFBOzs7TUFHQSxPQUFBLEVBQUE7OztJQUdBLFNBQUEsbUJBQUEsSUFBQTtNQUNBLElBQUEsSUFBQSxHQUFBOztNQUVBLEtBQUEsTUFBQSwyQkFBQTs7TUFFQSxRQUFBLFVBQUEsbUJBQUEsSUFBQSxVQUFBLFVBQUE7UUFDQSxFQUFBLFFBQUE7U0FDQSxVQUFBLE9BQUE7UUFDQSxFQUFBLE9BQUE7OztNQUdBLE9BQUEsRUFBQTs7O0lBR0EsU0FBQSxZQUFBO01BQ0EsSUFBQSxJQUFBLEdBQUE7O01BRUEsUUFBQSxVQUFBLFVBQUEsVUFBQSxVQUFBO1FBQ0EsRUFBQSxRQUFBO1NBQ0EsWUFBQTtRQUNBLEVBQUE7OztNQUdBLE9BQUEsRUFBQTs7O0lBR0EsU0FBQSxVQUFBLFlBQUE7TUFDQSxJQUFBLElBQUEsR0FBQTs7TUFFQSxLQUFBLE1BQUEsaUJBQUE7O01BRUEsUUFBQSxVQUFBLFVBQUEsWUFBQSxVQUFBLFVBQUE7UUFDQSxFQUFBLFFBQUE7U0FDQSxVQUFBLE9BQUE7UUFDQSxFQUFBLE9BQUE7OztNQUdBLE9BQUEsRUFBQTs7O0lBR0EsU0FBQSxXQUFBLFVBQUEsUUFBQSxPQUFBLE9BQUE7TUFDQSxJQUFBLElBQUEsR0FBQTs7TUFFQSxJQUFBLEtBQUEsQ0FBQSxVQUFBLFFBQUEsT0FBQTtNQUNBLEtBQUEsTUFBQSxrQkFBQSxHQUFBOztNQUVBLFFBQUEsVUFBQSxXQUFBLFVBQUEsUUFBQSxPQUFBLE9BQUEsVUFBQSxVQUFBO1FBQ0EsRUFBQSxRQUFBO1NBQ0EsVUFBQSxPQUFBO1FBQ0EsRUFBQSxPQUFBOzs7TUFHQSxPQUFBLEVBQUE7Ozs7Q0FJQSxTQUFBLHVCQUFBLHlCQUFBLE1BQUE7O0lBRUEsSUFBQSxVQUFBOztJQUVBLFFBQUEsT0FBQTtJQUNBLFFBQUEsWUFBQSx3QkFBQTtJQUNBLFFBQUEsWUFBQSx3QkFBQTtJQUNBLFFBQUEsYUFBQSx3QkFBQTtJQUNBLFFBQUEscUJBQUEsd0JBQUE7SUFDQSxRQUFBLFlBQUEsd0JBQUE7O0lBRUEsT0FBQTs7SUFFQSxTQUFBLEtBQUEsU0FBQTtNQUNBLHdCQUFBLG1CQUFBOzs7O0NBSUEsU0FBQSxnQkFBQSxNQUFBLElBQUE7O0lBRUEsSUFBQSxVQUFBOztJQUVBLFFBQUEsT0FBQTtJQUNBLFFBQUEsWUFBQTtJQUNBLFFBQUEsWUFBQTtJQUNBLFFBQUEsYUFBQTtJQUNBLFFBQUEsc0JBQUE7SUFDQSxRQUFBLFlBQUE7O0lBRUEsT0FBQTs7SUFFQSxTQUFBLEtBQUEsU0FBQTtNQUNBLEtBQUEsTUFBQSxnQ0FBQTs7O0lBR0EsU0FBQSxZQUFBO01BQ0EsS0FBQSxNQUFBOzs7SUFHQSxTQUFBLFVBQUEsT0FBQTtNQUNBLEtBQUEsTUFBQSxvQkFBQTs7O0lBR0EsU0FBQSxXQUFBLFVBQUEsUUFBQSxPQUFBLE9BQUE7TUFDQSxLQUFBLE1BQUEscUJBQUE7OztJQUdBLFNBQUEsbUJBQUEsSUFBQTtNQUNBLElBQUEsTUFBQSxxQkFBQTtNQUNBLElBQUEsSUFBQSxHQUFBOztNQUVBLEVBQUEsUUFBQTs7TUFFQSxPQUFBLEVBQUE7OztJQUdBLFNBQUEsVUFBQSxJQUFBO01BQ0EsS0FBQSxNQUFBLG9CQUFBOzs7O0NBSUEsU0FBQSxhQUFBLFdBQUEsU0FBQTs7RUFFQSxJQUFBLFFBQUEsU0FBQTtHQUNBLE9BQUEsVUFBQSxJQUFBO1NBQ0E7SUFDQSxPQUFBLFVBQUEsSUFBQTs7Ozs7O0FDbktBLENBQUEsWUFBQTtFQUNBOztFQUVBLFFBQUEsT0FBQSwyQkFBQTtHQUNBLE9BQUEsV0FBQTtHQUNBLE9BQUEsU0FBQTtHQUNBLE9BQUEsYUFBQTs7RUFFQSxTQUFBLFVBQUE7SUFDQSxPQUFBLFVBQUEsS0FBQTtNQUNBLE9BQUEsQ0FBQSxPQUFBLEtBQUEsS0FBQTs7OztFQUlBLFNBQUEsUUFBQTtJQUNBLE9BQUEsVUFBQSxNQUFBO01BQ0EsT0FBQSxLQUFBLFFBQUEsa0JBQUE7Ozs7RUFJQSxTQUFBLFlBQUE7SUFDQSxPQUFBLFVBQUEsTUFBQTtNQUNBLE9BQUE7V0FDQSxRQUFBO1dBQ0EsS0FBQTtXQUNBOzs7Ozs7Ozs7O0FDdEJBLENBQUEsWUFBQTtFQUNBOztFQUVBLFFBQUEsT0FBQSxtQkFBQTs7O0lBR0E7O0lBRUE7SUFDQTtJQUNBOzs7OztBQUtBIiwiZmlsZSI6Im5nLW1ldW1vYmktdXRpbHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHQubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMuc29jaWFsU2hhcmluZycsIFtdKVxuXHQuZmFjdG9yeSgnbWV1U29jaWFsU2hhcmluZycsIFsnJHEnLCAnJHdpbmRvdycsICdzdHJpcHRhZ3NGaWx0ZXInLCAnYnIybmxGaWx0ZXInLCAnJGxvZycsIG1ldVNvY2lhbFNoYXJpbmddKTtcbiAgXG4gIC8qXG4gICAgY29yZG92YSBwbHVnaW4gYWRkIGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9Tb2NpYWxTaGFyaW5nLVBob25lR2FwLVBsdWdpblxuICAqL1xuICBcbiAgZnVuY3Rpb24gbWV1U29jaWFsU2hhcmluZygkcSwgJHdpbmRvdywgc3RyaXB0YWdzLCBicjJubCwgJGxvZykge1xuICAgIFxuICAgIHZhciBzZXJ2aWNlID0ge307XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBwb3N0Zml4OiAnJ1xuICAgIH07XG4gICAgXG4gICAgc2VydmljZS5zaGFyZUl0ZW0gPSBzaGFyZUl0ZW07XG4gICAgc2VydmljZS5zaGFyZU1lZGlhID0gc2hhcmVNZWRpYTtcbiAgICBzZXJ2aWNlLnNldE9wdGlvbiA9IHNldE9wdGlvbjtcbiAgICBzZXJ2aWNlLnNldE9wdGlvbnMgPSBzZXRPcHRpb25zO1xuICAgIHNlcnZpY2Uuc2hhcmUgPSBzaGFyZTtcbiAgICBcbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgYW5ndWxhci5leHRlbmQob3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T3B0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICBvcHRpb25zLnBvc3RmaXggPSB2YWx1ZTtcbiAgICB9XG5cblx0XHRmdW5jdGlvbiBzaGFyZUl0ZW0oaXRlbSkge1xuXHRcdFx0XG5cdFx0XHR2YXIgcGFyYW1zID0ge1xuXHRcdFx0ICBtZXNzYWdlOiBpdGVtLmRlc2NyaXB0aW9uLFxuICAgICAgICBzdWJqZWN0OiBpdGVtLnRpdGxlLFxuICAgICAgICBmaWxlczogW10sXG4gICAgICAgIHVybDogaXRlbS5oYXNPd25Qcm9wZXJ0eSgnbGluaycpID8gaXRlbS5saW5rIDogbnVsbFxuXHRcdFx0fTtcblxuICAgICAgaWYgKGl0ZW0udGh1bWJuYWlscy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHBhcmFtcy5maWxlcy5wdXNoKGl0ZW0udGh1bWJuYWlsc1swXS51cmwpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2hhcmUocGFyYW1zKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzaGFyZU1lZGlhKG1lZGlhKSB7XG5cblx0XHRcdHZhciBwYXJhbXMgPSB7XG5cdFx0XHQgIG1lc3NhZ2U6IG1lZGlhLnRpdGxlLFxuICAgICAgICBzdWJqZWN0OiBtZWRpYS50aXRsZSxcbiAgICAgICAgZmlsZXM6IFtdLFxuICAgICAgICB1cmw6IG1lZGlhLnVybFxuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0Ly8gSWYgbWVkaWEgaXMgc2F2ZWQgbG9jYWxseSAobWVkaWEucGF0aCkgdGhlbiBzaGFyZSBpdFxuXHRcdFx0Ly8gRWxzZSBzaGFyZSBpdHMgbGluayAobWVkaWEudXJsKVxuXHRcdFx0Ly8gQ291bGRuJ3Qgc2hhcmUgdG9nZXRoZXIgbG9jYWwgcGRmIGFuZCBsaW5rXG5cdFx0XHRpZiAobWVkaWEuaGFzT3duUHJvcGVydHkoJ3BhdGgnKSkge1xuXHRcdFx0XHRwYXJhbXMuZmlsZXMucHVzaChtZWRpYS5wYXRoKTtcblx0XHRcdFx0cGFyYW1zLnVybCA9IG51bGw7XG5cdFx0XHR9IGVsc2UgaWYgKG1lZGlhLnRodW1ibmFpbHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRwYXJhbXMuZmlsZXMucHVzaChtZWRpYS50aHVtYm5haWxzWzBdLnVybCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiBzaGFyZShwYXJhbXMpO1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBzaGFyZShwYXJhbXMpIHtcbiAgICAvKlxuICAgICAgdGhpcyBpcyB0aGUgY29tcGxldGUgbGlzdCBvZiBjdXJyZW50bHkgc3VwcG9ydGVkIHBhcmFtcyB5b3UgY2FuIHBhc3MgdG8gdGhlIHBsdWdpbiAoYWxsIG9wdGlvbmFsKVxuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIG1lc3NhZ2U6ICdzaGFyZSB0aGlzJywgLy8gbm90IHN1cHBvcnRlZCBvbiBzb21lIGFwcHMgKEZhY2Vib29rLCBJbnN0YWdyYW0pXG4gICAgICAgIHN1YmplY3Q6ICd0aGUgc3ViamVjdCcsIC8vIGZpLiBmb3IgZW1haWxcbiAgICAgICAgZmlsZXM6IFsnJywgJyddLCAvLyBhbiBhcnJheSBvZiBmaWxlbmFtZXMgZWl0aGVyIGxvY2FsbHkgb3IgcmVtb3RlbHlcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly93d3cud2Vic2l0ZS5jb20vZm9vLyNiYXI/YT1iJyxcbiAgICAgICAgY2hvb3NlclRpdGxlOiAnUGljayBhbiBhcHAnIC8vIEFuZHJvaWQgb25seSwgeW91IGNhbiBvdmVycmlkZSB0aGUgZGVmYXVsdCBzaGFyZSBzaGVldCB0aXRsZVxuICAgICAgfVxuICAgICovXG4gICAgICAkbG9nLmRlYnVnKHBhcmFtcyk7XG4gICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XHRcdFx0XG4gICAgICB2YXIgc29jaWFsID0gJHdpbmRvdy5wbHVnaW5zICYmICR3aW5kb3cucGx1Z2lucy5zb2NpYWxzaGFyaW5nO1xuICAgICAgXG4gICAgICAvLyBJZiBwYXJhbXMuZGVzY3JpcHRpb24gaXMgbnVsbFxuICAgIFxuXHRcdFx0aWYgKHNvY2lhbCkge1xuICAgICAgICBpZiAob3B0aW9ucy5wb3N0Zml4KSB7XG4gICAgICAgICAgJGxvZy5kZWJ1ZygnUG9zdGZpeDogJyArIG9wdGlvbnMucG9zdGZpeCk7XG4gIFx0XHRcdFx0Ly8gcGFyYW1zLm1lc3NhZ2UgKz0gb3B0aW9ucy5wb3N0Zml4O1xuICBcdFx0XHRcdHBhcmFtcy5zdWJqZWN0ICs9IG9wdGlvbnMucG9zdGZpeDtcbiAgICAgICAgfVxuICAgICAgXG4gICAgICAgIHBhcmFtcy5tZXNzYWdlID0gcGFyYW1zLm1lc3NhZ2UgJiYgc3RyaXB0YWdzKGJyMm5sKHBhcmFtcy5tZXNzYWdlKSk7XG4gICAgICAgIHBhcmFtcy5zdWJqZWN0ID0gcGFyYW1zLnN1YmplY3QgJiYgc3RyaXB0YWdzKGJyMm5sKHBhcmFtcy5zdWJqZWN0KSk7XG5cbiAgICAgICAgdmFyIGNiX3NoYXJlID0ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmYWlsOiBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgICAgIGQucmVqZWN0KG1zZyk7XG4gICAgICAgICAgfSAgXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAkbG9nLmRlYnVnKHBhcmFtcyk7XG4gICAgICAgIHNvY2lhbC5zaGFyZVdpdGhPcHRpb25zKHBhcmFtcywgY2Jfc2hhcmUuc3VjY2VzcywgY2Jfc2hhcmUuZmFpbCk7IFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdCAgZC5yZWplY3QoJ1BsdWdpbiBzb2NpYWxzaGFyaW5nIG1pc3NpbmcnKTtcblx0XHRcdH1cbiAgICAgIFxuICAgICAgcmV0dXJuIGQucHJvbWlzZTtcblx0XHR9XG4gIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHQubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMubG9hZGluZycsIFtdKVxuXHQuZmFjdG9yeSgnbG9hZGluZ0ludGVyY2VwdG9yJywgbG9hZGluZ0ludGVyY2VwdG9yKTtcblx0XG5cdGZ1bmN0aW9uIGxvYWRpbmdJbnRlcmNlcHRvcigkcSwgJHJvb3RTY29wZSwgJGxvZykge1xuXHRcdFxuXHRcdHZhciBudW1Mb2FkaW5ncyA9IDA7XG5cdFx0XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlcXVlc3Q6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICBpZiAoIW51bUxvYWRpbmdzKyspIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2xvYWRpbmc6c3RhcnQnKTtcbiAgICAgICAgfVxuXG5cdFx0XHRcdHJldHVybiBjb25maWcgfHwgJHEud2hlbihjb25maWcpO1xuXHRcdFx0fSxcblx0XHRcdHJlc3BvbnNlOiBmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdFx0XHRpZiAoISgtLW51bUxvYWRpbmdzKSkge1xuXHRcdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgnbG9hZGluZzpzdG9wJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UgfHwgJHEud2hlbihyZXNwb25zZSk7XG5cdFx0XHR9LFxuXHRcdFx0cmVxdWVzdEVycm9yOiBmdW5jdGlvbihyZXF1ZXN0KSB7XG5cdFx0XHRcdGlmICghKC0tbnVtTG9hZGluZ3MpKSB7XG5cdFx0XHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCdsb2FkaW5nOnN0b3AnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAkcS5yZWplY3QocmVxdWVzdCk7XG5cdFx0XHR9LFxuXHRcdFx0cmVzcG9uc2VFcnJvcjogZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRcdFx0aWYgKCEoLS1udW1Mb2FkaW5ncykpIHtcblx0XHRcdFx0XHQkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2xvYWRpbmc6c3RvcCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHQubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMuY2FsZW5kYXInLCBbXSlcblx0LmZhY3RvcnkoJ21ldUNhbGVuZGFyJywgWyckcScsICckd2luZG93JywgJ3N0cmlwdGFnc0ZpbHRlcicsICdicjJubEZpbHRlcicsIG1ldUNhbGVuZGFyXSk7XG4gIFxuICAvKlxuICAgIGNvcmRvdmEgcGx1Z2luIGFkZCBodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vQ2FsZW5kYXItUGhvbmVHYXAtUGx1Z2luLmdpdFxuICAgIElmIHN0YXJ0IGFuZCBlbmRfZGF0ZSBlcXVhbCAwMDowMCB0aGVuIHRoZSBldmVudCBvY2N1cnMgYWxsIGRheSBsb25nXG4gICovXG4gIFxuICBmdW5jdGlvbiBtZXVDYWxlbmRhcigkcSwgJHdpbmRvdywgc3RyaXB0YWdzLCBicjJubCkge1xuICAgIFxuICAgIHZhciBzZXJ2aWNlID0ge307XG4gICAgXG4gICAgc2VydmljZS5jcmVhdGVFdmVudEludGVyYWN0aXZlbHkgPSBjcmVhdGVFdmVudEludGVyYWN0aXZlbHk7XG4gICAgXG4gICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgXG4gICAgZnVuY3Rpb24gY3JlYXRlRXZlbnRJbnRlcmFjdGl2ZWx5KG9wdGlvbnMpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKSxcbiAgICAgICAgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgdGl0bGU6IG51bGwsXG4gICAgICAgICAgYWRkcmVzczogbnVsbCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgICAgc3RhcnRfZGF0ZTogbnVsbCxcbiAgICAgICAgICBlbmRfZGF0ZTogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgJHdpbmRvdy5wbHVnaW5zLmNhbGVuZGFyLmNyZWF0ZUV2ZW50SW50ZXJhY3RpdmVseShcbiAgICAgICAgc3RyaXB0YWdzKGRlZmF1bHRPcHRpb25zLnRpdGxlKSxcbiAgICAgICAgc3RyaXB0YWdzKGRlZmF1bHRPcHRpb25zLmFkZHJlc3MpLFxuICAgICAgICBzdHJpcHRhZ3MoYnIybmwoZGVmYXVsdE9wdGlvbnMuZGVzY3JpcHRpb24pKSxcbiAgICAgICAgbmV3IERhdGUoZGVmYXVsdE9wdGlvbnMuc3RhcnRfZGF0ZSAgKiAxMDAwKSxcbiAgICAgICAgbmV3IERhdGUoZGVmYXVsdE9wdGlvbnMuZW5kX2RhdGUgICogMTAwMCksXG4gICAgICAgIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgZC5yZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuICBcblx0YW5ndWxhclxuXHQubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMuYW5hbHl0aWNzJywgW10pXG5cdC5mYWN0b3J5KCdnb29nbGVBbmFseXRpY3NDb3Jkb3ZhJywgZ29vZ2xlQW5hbHl0aWNzQ29yZG92YSlcblx0LmZhY3RvcnkoJ2dvb2dsZUFuYWx5dGljcycsIGdvb2dsZUFuYWx5dGljcylcbiAgLmZhY3RvcnkoJyRjb3Jkb3ZhR29vZ2xlQW5hbHl0aWNzJywgJGNvcmRvdmFHb29nbGVBbmFseXRpY3MpXG5cdC5mYWN0b3J5KCdtZXVBbmFseXRpY3MnLCBtZXVBbmFseXRpY3MpO1xuICBcbiAgLypcbiAgICBJbnNwaXJlZCBieSBuZ0NvcmRvdmFcbiAgICBXZSd2ZSBleHRyYWN0ZWQgb25seSByZXF1aXJlZCBtZXRob2RzIFxuICBcbiAgICBpbnN0YWxsICAgOiAgICAgY29yZG92YSBwbHVnaW4gYWRkIGh0dHBzOi8vZ2l0aHViLmNvbS9kYW53aWxzb24vZ29vZ2xlLWFuYWx5dGljcy1wbHVnaW4uZ2l0XG4gICovXG5cbiAgZnVuY3Rpb24gJGNvcmRvdmFHb29nbGVBbmFseXRpY3MoJHEsICR3aW5kb3csICRsb2cpIHtcbiAgICBcbiAgICB2YXIgc2VydmljZSA9IHt9O1xuICAgIFxuICAgIHNlcnZpY2Uuc3RhcnRUcmFja2VyV2l0aElkID0gc3RhcnRUcmFja2VyV2l0aElkO1xuICAgIHNlcnZpY2UuZGVidWdNb2RlID0gZGVidWdNb2RlO1xuICAgIHNlcnZpY2UudHJhY2tWaWV3ID0gdHJhY2tWaWV3O1xuICAgIHNlcnZpY2UudHJhY2tFdmVudCA9IHRyYWNrRXZlbnQ7XG4gICAgc2VydmljZS5zZXRVc2VySWQgPSBzZXRVc2VySWQ7XG4gICAgXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBzZXRVc2VySWQoaWQpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgJGxvZy5kZWJ1ZygnU2V0IFVzZXIgSWQ6ICcgKyBpZCk7XG4gICAgICBcbiAgICAgICR3aW5kb3cuYW5hbHl0aWNzLnNldFVzZXJJZChpZCwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRUcmFja2VyV2l0aElkKGlkKSB7XG4gICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICRsb2cuZGVidWcoJ1N0YXJ0IHRyYWNraW5nIEdBIElkOiAnICsgaWQpO1xuXG4gICAgICAkd2luZG93LmFuYWx5dGljcy5zdGFydFRyYWNrZXJXaXRoSWQoaWQsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlYnVnTW9kZSgpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgJHdpbmRvdy5hbmFseXRpY3MuZGVidWdNb2RlKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBkLnJlamVjdCgpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhY2tWaWV3KHNjcmVlbk5hbWUpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgIFxuICAgICAgJGxvZy5kZWJ1ZygnVHJhY2sgVmlldzogJyArIHNjcmVlbk5hbWUpO1xuICAgICAgXG4gICAgICAkd2luZG93LmFuYWx5dGljcy50cmFja1ZpZXcoc2NyZWVuTmFtZSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhY2tFdmVudChjYXRlZ29yeSwgYWN0aW9uLCBsYWJlbCwgdmFsdWUpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgdmFyIGV2ID0gW2NhdGVnb3J5LCBhY3Rpb24sIGxhYmVsLCB2YWx1ZV07XG4gICAgICAkbG9nLmRlYnVnKCdUcmFjayBFdmVudDogJyArIGV2LnRvU3RyaW5nKCkpO1xuICAgICAgXG4gICAgICAkd2luZG93LmFuYWx5dGljcy50cmFja0V2ZW50KGNhdGVnb3J5LCBhY3Rpb24sIGxhYmVsLCB2YWx1ZSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuICB9XG5cdFx0XG5cdGZ1bmN0aW9uIGdvb2dsZUFuYWx5dGljc0NvcmRvdmEoJGNvcmRvdmFHb29nbGVBbmFseXRpY3MsICRsb2cpIHtcbiAgICBcbiAgICB2YXIgc2VydmljZSA9IHt9O1xuICAgIFxuICAgIHNlcnZpY2UuaW5pdCA9IGluaXQ7XG4gICAgc2VydmljZS5kZWJ1Z01vZGUgPSAkY29yZG92YUdvb2dsZUFuYWx5dGljcy5kZWJ1Z01vZGU7XG4gICAgc2VydmljZS50cmFja1ZpZXcgPSAkY29yZG92YUdvb2dsZUFuYWx5dGljcy50cmFja1ZpZXc7XG4gICAgc2VydmljZS50cmFja0V2ZW50ID0gJGNvcmRvdmFHb29nbGVBbmFseXRpY3MudHJhY2tFdmVudDtcbiAgICBzZXJ2aWNlLnN0YXJ0VHJhY2tlcldpdGhJZCA9ICRjb3Jkb3ZhR29vZ2xlQW5hbHl0aWNzLnN0YXJ0VHJhY2tlcldpdGhJZDtcbiAgICBzZXJ2aWNlLnNldFVzZXJJZCA9ICRjb3Jkb3ZhR29vZ2xlQW5hbHl0aWNzLnNldFVzZXJJZDtcbiAgICBcbiAgICByZXR1cm4gc2VydmljZTtcbiAgICBcbiAgICBmdW5jdGlvbiBpbml0KHRyYWNrSWQpIHtcbiAgICAgICRjb3Jkb3ZhR29vZ2xlQW5hbHl0aWNzLnN0YXJ0VHJhY2tlcldpdGhJZCh0cmFja0lkKTtcbiAgICB9XG5cdH1cbiAgXG5cdGZ1bmN0aW9uIGdvb2dsZUFuYWx5dGljcygkbG9nLCAkcSkge1xuICAgIFxuICAgIHZhciBzZXJ2aWNlID0ge307XG4gICAgXG4gICAgc2VydmljZS5pbml0ID0gaW5pdDtcbiAgICBzZXJ2aWNlLmRlYnVnTW9kZSA9IGRlYnVnTW9kZTtcbiAgICBzZXJ2aWNlLnRyYWNrVmlldyA9IHRyYWNrVmlldztcbiAgICBzZXJ2aWNlLnRyYWNrRXZlbnQgPSB0cmFja0V2ZW50O1xuICAgIHNlcnZpY2Uuc3RhcnRUcmFja2VyV2l0aElkICA9IHN0YXJ0VHJhY2tlcldpdGhJZDtcbiAgICBzZXJ2aWNlLnNldFVzZXJJZCA9IHNldFVzZXJJZDtcbiAgICBcbiAgICByZXR1cm4gc2VydmljZTtcbiAgICBcbiAgICBmdW5jdGlvbiBpbml0KHRyYWNrSWQpIHtcbiAgICAgICRsb2cuZGVidWcoJ0dvb2dsZSBBbmFseXRpY3MgdHJhY2sgSWQ6ICcgKyB0cmFja0lkKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gZGVidWdNb2RlKCkge1xuICAgICAgJGxvZy5kZWJ1ZygnRW5hYmxlIERlYnVnJyk7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHRyYWNrVmlldyh0aXRsZSkge1xuICAgICAgJGxvZy5kZWJ1ZygnVHJhY2tpbmcgUGFnZTogJyArIHRpdGxlKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gdHJhY2tFdmVudChjYXRlZ29yeSwgYWN0aW9uLCBsYWJlbCwgdmFsdWUpIHtcbiAgICAgICRsb2cuZGVidWcoJ1RyYWNraW5nIEV2ZW50OiAnICsgYWN0aW9uKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gc3RhcnRUcmFja2VyV2l0aElkKGlkKSB7XG4gICAgICB2YXIgbXNnID0gJ1RyYWNraW5nIEdBIElkOiAnICsgaWQ7XG4gICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgIGQucmVzb2x2ZShtc2cpO1xuXG4gICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBzZXRVc2VySWQoaWQpIHtcbiAgICAgICRsb2cuZGVidWcoJ1RyYWNraW5nIFVzZXI6ICcgKyBpZCk7XG4gICAgfVxuXHR9XG4gIFxuXHRmdW5jdGlvbiBtZXVBbmFseXRpY3MoJGluamVjdG9yLCAkd2luZG93KSB7XG5cblx0XHRpZiAoJHdpbmRvdy5jb3Jkb3ZhKSB7XG5cdFx0XHRyZXR1cm4gJGluamVjdG9yLmdldCgnZ29vZ2xlQW5hbHl0aWNzQ29yZG92YScpO1xuXHRcdH0gZWxzZSB7XG5cdFx0ICByZXR1cm4gJGluamVjdG9yLmdldCgnZ29vZ2xlQW5hbHl0aWNzJyk7XG5cdFx0fVxuXHR9XG59KSgpOyIsIi8qIGdsb2JhbCBhbmd1bGFyICovXG4vKiBlc2xpbnQgbm8tdW5kZWY6IFwiZXJyb3JcIiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMuZmlsdGVycycsIFtdKVxuICAuZmlsdGVyKCdpc0VtcHR5JywgaXNFbXB0eSlcbiAgLmZpbHRlcignYnIybmwnLCBicjJubClcbiAgLmZpbHRlcignc3RyaXB0YWdzJywgc3RyaXB0YWdzKTtcblxuICBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gIU9iamVjdC5rZXlzKG9iaikubGVuZ3RoO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBicjJubCgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoLzxiclxccypbXFwvXT8+L2dpLCAnXFxuJyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmlwdGFncygpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgIHJldHVybiBhbmd1bGFyXG4gICAgICAgICAgLmVsZW1lbnQoJzxkaXYvPicpXG4gICAgICAgICAgLmh0bWwodGV4dClcbiAgICAgICAgICAudGV4dCgpO1xuICAgIH07XG4gIH1cbn0pKCk7XG4iLCIvKiBnbG9iYWwgYW5ndWxhciAqL1xuLyogZXNsaW50IG5vLXVuZGVmOiBcImVycm9yXCIgKi9cbi8qXG4gIFRPRE86IHNob3VsZCByZWxlYXNlIG1pbmlmaWVkICgubWluLmpzKSBhbmQgbm90ICguanMpXG4qL1xuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMnLCBbXG4gICAgLy8nbmdNZXVtb2JpLlV0aWxzLmZpbGVzJyxcbiAgICAvLyduZ01ldW1vYmkuVXRpbHMuYXBpJyxcbiAgICAnbmdNZXVtb2JpLlV0aWxzLmxvYWRpbmcnLFxuICAgIC8vJ25nTWV1bW9iaS5VdGlscy5jb25uZWN0aW9uJyxcbiAgICAnbmdNZXVtb2JpLlV0aWxzLmNhbGVuZGFyJyxcbiAgICAnbmdNZXVtb2JpLlV0aWxzLmFuYWx5dGljcycsXG4gICAgJ25nTWV1bW9iaS5VdGlscy5zb2NpYWxTaGFyaW5nJ1xuICAgIC8vJ25nTWV1bW9iaS5VdGlscy5maWx0ZXJzJ1xuICBdKTtcbiAgXG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
