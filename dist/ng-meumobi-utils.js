!function(){"use strict";function Poll(){this.$get=["$q","API","$log",function($q,API,$log){var api={},polls={};return api.polls=function(){return!Object.keys(polls).length&&localStorage.polls&&(polls=JSON.parse(localStorage.polls)),polls},api.addPoll=function(poll){polls[poll._id]=poll,localStorage.polls=JSON.stringify(polls)},api.removePolls=function(){},api.vote=function(){},api.hasExpired=function(date){var now=Date.now(),end_date=1e3*date,hasExpired=now-end_date>0;return hasExpired},api.hasVoted=function(poll){var hasVoted=null!==poll.voted||!!api.polls()[poll._id];return $log.debug("Poll is voted [Object]"+(null!==poll.voted)),$log.debug("Poll is voted [locaStorage]"+!!api.polls()[poll._id]),$log.debug("Has voted ? "+hasVoted),hasVoted},api.paramify=function(poll){var values={},obj={};return values.value=poll.values,obj.params=values,obj.id=poll._id,obj},api.computeResults=function(poll){var results=[],result={},total=api.totalVotes(poll);$log.debug("Total votes: "+total);for(var x in poll.results)isNaN(poll.results[x].value)||(result=poll.results[x],result.myVote=null!==poll.voted&&poll.voted.values.hasOwnProperty(x),result.label=poll.options[result.value],result.ratio=0!==total?parseInt(poll.results[x].votes)/total*100+"%":"0%",results.push(result));return results},api.totalVotes=function(poll){var total=0;for(var x in poll.results)total+=poll.results[x].votes;return total},{statuses:{open:"open",closed:"closed",voted:"voted"},get:function(poll){$log.debug("===== Poll: "+poll.title);var status=this.getStatus(poll);return status==this.statuses.voted&&api.polls()[poll._id]?(poll=api.polls()[poll._id],$log.debug("Poll loaded from localStorage")):(poll.status=status,poll.total=api.totalVotes(poll)),poll.status!==this.statuses.open&&(poll.results=api.computeResults(poll)),poll},getStatus:function(poll){var statuses=this.statuses,status=statuses.open;return api.hasExpired(poll.end_date)?status=statuses.closed:api.hasVoted(poll)&&(status=statuses.voted),$log.debug("Get Status: "+status),status},vote:function(poll){var deferred=$q.defer(),statuses=this.statuses,vote={success:function(response){$log.debug(response),UtilsService.toast(translateFilter("poll.vote.Success")),poll.status=statuses.voted,poll.total=api.totalVotes(response.data),poll.results=api.computeResults(response.data),poll.voted=response.data.voted,poll.status=statuses.voted,api.addPoll(poll),deferred.resolve(poll)},error:function(response){var msg=translateFilter("poll.vote.Error");msg+=response.data&&response.data.error?": "+translateFilter("[API]: "+response.data.error):": "+translateFilter("default.network.Error"),UtilsService.toast(msg),$log.debug(msg),deferred.reject(response.data)}};return API.Poll.submit(api.paramify(poll),vote.success,vote.error),deferred.promise}}}]}angular.module("ngMeumobi.Utils.services",[]).provider("Poll",Poll)}(),function(){"use strict";function meuFilesServices($log,$location,$q){function open(uri,type){var q=$q.defer();return cordova.plugins.fileOpener2.open(uri,type,{error:function(e){"File doest not exist"==e.message?e.message="File not found":e.message="Couldn't open this file. No handler found on device for ".type,q.reject(e)},success:function(){q.resolve()}}),q.promise}var service={};return service.open=open,service}angular.module("ngMeumobi.Utils.services",[]).factory("meuFilesServices",["$log","$location","$q",meuFilesServices])}(),function(){"use strict";function isEmpty(){return function(obj){return!Object.keys(obj).length}}function br2nl(){return function(text){return text.replace(/<br\s*[\/]?>/gi,"\n")}}function striptags(){return function(text){return angular.element("<div/>").html(text).text()}}angular.module("ngMeumobi.Utils.filters",[]).filter("isEmpty",isEmpty).filter("br2nl",br2nl).filter("striptags",striptags)}(),function(){"use strict";angular.module("ngMeumobi.Utils",["ngMeumobi.Utils.services","ngMeumobi.Utils.filters"])}();
//# sourceMappingURL=data:application/json;base64,
