(function() {
	'use strict';

	loadingInterceptor.$inject = ["$q", "$rootScope", "$log"];
	angular
	.module('ngMeumobi.Utils.loading', [])
	.factory('loadingInterceptor', loadingInterceptor);
	
	function loadingInterceptor($q, $rootScope, $log) {
		
		var numLoadings = 0;
		
		return {
			request: function(config) {
        if (!numLoadings++) {
          $rootScope.$broadcast('loading:start');
        }

				return config || $q.when(config);
			},
			response: function(response) {
				if (!(--numLoadings)) {
					$rootScope.$broadcast('loading:stop');
				}

				return response || $q.when(response);
			},
			requestError: function(request) {
				if (!(--numLoadings)) {
					$rootScope.$broadcast('loading:stop');
				}

				return $q.reject(request);
			},
			responseError: function(response) {
				if (!(--numLoadings)) {
					$rootScope.$broadcast('loading:stop');
				}
				
				return $q.reject(response);
			}
		};
	}
})();

(function() {
	'use strict';

	angular
	.module('ngMeumobi.Utils.calendar', [])
	.factory('meuCalendar', ['$q', '$window', 'striptagsFilter', 'br2nlFilter', meuCalendar]);
  
  /*
    cordova plugin add https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin.git
    If start and end_date equal 00:00 then the event occurs all day long
  */
  
  function meuCalendar($q, $window, striptags, br2nl) {
    
    var service = {};
    
    service.createEventInteractively = createEventInteractively;
    
    return service;
    
    function createEventInteractively(options) {
      var d = $q.defer(),
        defaultOptions = {
          title: null,
          address: null,
          description: '',
          start_date: null,
          end_date: null
        };

      defaultOptions = angular.extend(defaultOptions, options);

      $window.plugins.calendar.createEventInteractively(
        striptags(defaultOptions.title),
        striptags(defaultOptions.address),
        striptags(br2nl(defaultOptions.description)),
        new Date(defaultOptions.start_date  * 1000),
        new Date(defaultOptions.end_date  * 1000),
        function (message) {
          d.resolve(message);
        }, function (error) {
          d.reject(error);
        }
      );

      return d.promise;
    }
  }
})();
(function() {
	'use strict';
  
	googleAnalyticsCordova.$inject = ["$cordovaGoogleAnalytics", "$log"];
	googleAnalytics.$inject = ["$log", "$q"];
  $cordovaGoogleAnalytics.$inject = ["$q", "$window", "$log"];
	meuAnalytics.$inject = ["$injector", "$window"];
	angular
	.module('ngMeumobi.Utils.analytics', [])
	.factory('googleAnalyticsCordova', googleAnalyticsCordova)
	.factory('googleAnalytics', googleAnalytics)
  .factory('$cordovaGoogleAnalytics', $cordovaGoogleAnalytics)
	.factory('meuAnalytics', meuAnalytics);
  
  /*
    Inspired by ngCordova
    We've extracted only required methods 
  
    install   :     cordova plugin add https://github.com/danwilson/google-analytics-plugin.git
  */

  function $cordovaGoogleAnalytics($q, $window, $log) {
    
    var service = {};
    
    service.startTrackerWithId = startTrackerWithId;
    service.debugMode = debugMode;
    service.trackView = trackView;
    service.trackEvent = trackEvent;
    service.setUserId = setUserId;
    
    return service;

    function setUserId(id) {
      var d = $q.defer();

      $log.debug('Set User Id: ' + id);
      
      $window.analytics.setUserId(id, function (response) {
        d.resolve(response);
      }, function (error) {
        d.reject(error);
      });

      return d.promise;
    }

    function startTrackerWithId(id) {
      var d = $q.defer();

      $log.debug('Start tracking GA Id: ' + id);

      $window.analytics.startTrackerWithId(id, function (response) {
        d.resolve(response);
      }, function (error) {
        d.reject(error);
      });

      return d.promise;
    }

    function debugMode() {
      var d = $q.defer();

      $window.analytics.debugMode(function (response) {
        d.resolve(response);
      }, function () {
        d.reject();
      });

      return d.promise;
    }

    function trackView(screenName) {
      var d = $q.defer();
      
      $log.debug('Track View: ' + screenName);
      
      $window.analytics.trackView(screenName, function (response) {
        d.resolve(response);
      }, function (error) {
        d.reject(error);
      });

      return d.promise;
    }

    function trackEvent(category, action, label, value) {
      var d = $q.defer();

      var ev = [category, action, label, value];
      $log.debug('Track Event: ' + ev.toString());
      
      $window.analytics.trackEvent(category, action, label, value, function (response) {
        d.resolve(response);
      }, function (error) {
        d.reject(error);
      });

      return d.promise;
    }
  }
		
	function googleAnalyticsCordova($cordovaGoogleAnalytics, $log) {
    
    var service = {};
    
    service.init = init;
    service.debugMode = $cordovaGoogleAnalytics.debugMode;
    service.trackView = $cordovaGoogleAnalytics.trackView;
    service.trackEvent = $cordovaGoogleAnalytics.trackEvent;
    service.startTrackerWithId = $cordovaGoogleAnalytics.startTrackerWithId;
    service.setUserId = $cordovaGoogleAnalytics.setUserId;
    
    return service;
    
    function init(trackId) {
      $cordovaGoogleAnalytics.startTrackerWithId(trackId);
    }
	}
  
	function googleAnalytics($log, $q) {
    
    var service = {};
    
    service.init = init;
    service.debugMode = debugMode;
    service.trackView = trackView;
    service.trackEvent = trackEvent;
    service.startTrackerWithId  = startTrackerWithId;
    service.setUserId = setUserId;
    
    return service;
    
    function init(trackId) {
      $log.debug('Google Analytics track Id: ' + trackId);
    }
    
    function debugMode() {
      $log.debug('Enable Debug');
    }
    
    function trackView(title) {
      $log.debug('Tracking Page: ' + title);
    }
    
    function trackEvent(category, action, label, value) {
      $log.debug('Tracking Event: ' + action);
    }
    
    function startTrackerWithId(id) {
      var msg = 'Tracking GA Id: ' + id;
      var d = $q.defer();

      d.resolve(msg);

      return d.promise;
    }
    
    function setUserId(id) {
      $log.debug('Tracking User: ' + id);
    }
	}
  
	function meuAnalytics($injector, $window) {

		if ($window.cordova) {
			return $injector.get('googleAnalyticsCordova');
		} else {
		  return $injector.get('googleAnalytics');
		}
	}
})();
/* global angular */
/* eslint no-undef: "error" */
(function () {
  'use strict';

  angular.module('ngMeumobi.Utils.filters', [])
  .filter('isEmpty', isEmpty)
  .filter('br2nl', br2nl)
  .filter('striptags', striptags);

  function isEmpty() {
    return function (obj) {
      return !Object.keys(obj).length;
    };
  }

  function br2nl() {
    return function (text) {
      return text.replace(/<br\s*[\/]?>/gi, '\n');
    };
  }

  function striptags() {
    return function (text) {
      return angular
          .element('<div/>')
          .html(text)
          .text();
    };
  }
})();

/* global angular */
/* eslint no-undef: "error" */
/*
  TODO: should release minified (.min.js) and not (.js)
*/
(function () {
  'use strict';

  angular.module('ngMeumobi.Utils', [
    //'ngMeumobi.Utils.files',
    //'ngMeumobi.Utils.api',
    'ngMeumobi.Utils.loading',
    //'ngMeumobi.Utils.connection',
    'ngMeumobi.Utils.calendar',
    'ngMeumobi.Utils.analytics',
    //'ngMeumobi.Utils.filters'
  ]);
  
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxvYWRpbmcuanMiLCJDYWxlbmRhci5qcyIsIkFuYWx5dGljcy5qcyIsIm1ldS1maWx0ZXJzLmpzIiwibW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLENBQUEsV0FBQTtDQUNBOzs7Q0FFQTtFQUNBLE9BQUEsMkJBQUE7RUFDQSxRQUFBLHNCQUFBOztDQUVBLFNBQUEsbUJBQUEsSUFBQSxZQUFBLE1BQUE7O0VBRUEsSUFBQSxjQUFBOztFQUVBLE9BQUE7R0FDQSxTQUFBLFNBQUEsUUFBQTtRQUNBLElBQUEsQ0FBQSxlQUFBO1VBQ0EsV0FBQSxXQUFBOzs7SUFHQSxPQUFBLFVBQUEsR0FBQSxLQUFBOztHQUVBLFVBQUEsU0FBQSxVQUFBO0lBQ0EsSUFBQSxFQUFBLEVBQUEsY0FBQTtLQUNBLFdBQUEsV0FBQTs7O0lBR0EsT0FBQSxZQUFBLEdBQUEsS0FBQTs7R0FFQSxjQUFBLFNBQUEsU0FBQTtJQUNBLElBQUEsRUFBQSxFQUFBLGNBQUE7S0FDQSxXQUFBLFdBQUE7OztJQUdBLE9BQUEsR0FBQSxPQUFBOztHQUVBLGVBQUEsU0FBQSxVQUFBO0lBQ0EsSUFBQSxFQUFBLEVBQUEsY0FBQTtLQUNBLFdBQUEsV0FBQTs7O0lBR0EsT0FBQSxHQUFBLE9BQUE7Ozs7OztBQ3RDQSxDQUFBLFdBQUE7Q0FDQTs7Q0FFQTtFQUNBLE9BQUEsNEJBQUE7RUFDQSxRQUFBLGVBQUEsQ0FBQSxNQUFBLFdBQUEsbUJBQUEsZUFBQTs7Ozs7OztFQU9BLFNBQUEsWUFBQSxJQUFBLFNBQUEsV0FBQSxPQUFBOztJQUVBLElBQUEsVUFBQTs7SUFFQSxRQUFBLDJCQUFBOztJQUVBLE9BQUE7O0lBRUEsU0FBQSx5QkFBQSxTQUFBO01BQ0EsSUFBQSxJQUFBLEdBQUE7UUFDQSxpQkFBQTtVQUNBLE9BQUE7VUFDQSxTQUFBO1VBQ0EsYUFBQTtVQUNBLFlBQUE7VUFDQSxVQUFBOzs7TUFHQSxpQkFBQSxRQUFBLE9BQUEsZ0JBQUE7O01BRUEsUUFBQSxRQUFBLFNBQUE7UUFDQSxVQUFBLGVBQUE7UUFDQSxVQUFBLGVBQUE7UUFDQSxVQUFBLE1BQUEsZUFBQTtRQUNBLElBQUEsS0FBQSxlQUFBLGNBQUE7UUFDQSxJQUFBLEtBQUEsZUFBQSxZQUFBO1FBQ0EsVUFBQSxTQUFBO1VBQ0EsRUFBQSxRQUFBO1dBQ0EsVUFBQSxPQUFBO1VBQ0EsRUFBQSxPQUFBOzs7O01BSUEsT0FBQSxFQUFBOzs7O0FDN0NBLENBQUEsV0FBQTtDQUNBOzs7Ozs7Q0FFQTtFQUNBLE9BQUEsNkJBQUE7RUFDQSxRQUFBLDBCQUFBO0VBQ0EsUUFBQSxtQkFBQTtHQUNBLFFBQUEsMkJBQUE7RUFDQSxRQUFBLGdCQUFBOzs7Ozs7Ozs7RUFTQSxTQUFBLHdCQUFBLElBQUEsU0FBQSxNQUFBOztJQUVBLElBQUEsVUFBQTs7SUFFQSxRQUFBLHFCQUFBO0lBQ0EsUUFBQSxZQUFBO0lBQ0EsUUFBQSxZQUFBO0lBQ0EsUUFBQSxhQUFBO0lBQ0EsUUFBQSxZQUFBOztJQUVBLE9BQUE7O0lBRUEsU0FBQSxVQUFBLElBQUE7TUFDQSxJQUFBLElBQUEsR0FBQTs7TUFFQSxLQUFBLE1BQUEsa0JBQUE7O01BRUEsUUFBQSxVQUFBLFVBQUEsSUFBQSxVQUFBLFVBQUE7UUFDQSxFQUFBLFFBQUE7U0FDQSxVQUFBLE9BQUE7UUFDQSxFQUFBLE9BQUE7OztNQUdBLE9BQUEsRUFBQTs7O0lBR0EsU0FBQSxtQkFBQSxJQUFBO01BQ0EsSUFBQSxJQUFBLEdBQUE7O01BRUEsS0FBQSxNQUFBLDJCQUFBOztNQUVBLFFBQUEsVUFBQSxtQkFBQSxJQUFBLFVBQUEsVUFBQTtRQUNBLEVBQUEsUUFBQTtTQUNBLFVBQUEsT0FBQTtRQUNBLEVBQUEsT0FBQTs7O01BR0EsT0FBQSxFQUFBOzs7SUFHQSxTQUFBLFlBQUE7TUFDQSxJQUFBLElBQUEsR0FBQTs7TUFFQSxRQUFBLFVBQUEsVUFBQSxVQUFBLFVBQUE7UUFDQSxFQUFBLFFBQUE7U0FDQSxZQUFBO1FBQ0EsRUFBQTs7O01BR0EsT0FBQSxFQUFBOzs7SUFHQSxTQUFBLFVBQUEsWUFBQTtNQUNBLElBQUEsSUFBQSxHQUFBOztNQUVBLEtBQUEsTUFBQSxpQkFBQTs7TUFFQSxRQUFBLFVBQUEsVUFBQSxZQUFBLFVBQUEsVUFBQTtRQUNBLEVBQUEsUUFBQTtTQUNBLFVBQUEsT0FBQTtRQUNBLEVBQUEsT0FBQTs7O01BR0EsT0FBQSxFQUFBOzs7SUFHQSxTQUFBLFdBQUEsVUFBQSxRQUFBLE9BQUEsT0FBQTtNQUNBLElBQUEsSUFBQSxHQUFBOztNQUVBLElBQUEsS0FBQSxDQUFBLFVBQUEsUUFBQSxPQUFBO01BQ0EsS0FBQSxNQUFBLGtCQUFBLEdBQUE7O01BRUEsUUFBQSxVQUFBLFdBQUEsVUFBQSxRQUFBLE9BQUEsT0FBQSxVQUFBLFVBQUE7UUFDQSxFQUFBLFFBQUE7U0FDQSxVQUFBLE9BQUE7UUFDQSxFQUFBLE9BQUE7OztNQUdBLE9BQUEsRUFBQTs7OztDQUlBLFNBQUEsdUJBQUEseUJBQUEsTUFBQTs7SUFFQSxJQUFBLFVBQUE7O0lBRUEsUUFBQSxPQUFBO0lBQ0EsUUFBQSxZQUFBLHdCQUFBO0lBQ0EsUUFBQSxZQUFBLHdCQUFBO0lBQ0EsUUFBQSxhQUFBLHdCQUFBO0lBQ0EsUUFBQSxxQkFBQSx3QkFBQTtJQUNBLFFBQUEsWUFBQSx3QkFBQTs7SUFFQSxPQUFBOztJQUVBLFNBQUEsS0FBQSxTQUFBO01BQ0Esd0JBQUEsbUJBQUE7Ozs7Q0FJQSxTQUFBLGdCQUFBLE1BQUEsSUFBQTs7SUFFQSxJQUFBLFVBQUE7O0lBRUEsUUFBQSxPQUFBO0lBQ0EsUUFBQSxZQUFBO0lBQ0EsUUFBQSxZQUFBO0lBQ0EsUUFBQSxhQUFBO0lBQ0EsUUFBQSxzQkFBQTtJQUNBLFFBQUEsWUFBQTs7SUFFQSxPQUFBOztJQUVBLFNBQUEsS0FBQSxTQUFBO01BQ0EsS0FBQSxNQUFBLGdDQUFBOzs7SUFHQSxTQUFBLFlBQUE7TUFDQSxLQUFBLE1BQUE7OztJQUdBLFNBQUEsVUFBQSxPQUFBO01BQ0EsS0FBQSxNQUFBLG9CQUFBOzs7SUFHQSxTQUFBLFdBQUEsVUFBQSxRQUFBLE9BQUEsT0FBQTtNQUNBLEtBQUEsTUFBQSxxQkFBQTs7O0lBR0EsU0FBQSxtQkFBQSxJQUFBO01BQ0EsSUFBQSxNQUFBLHFCQUFBO01BQ0EsSUFBQSxJQUFBLEdBQUE7O01BRUEsRUFBQSxRQUFBOztNQUVBLE9BQUEsRUFBQTs7O0lBR0EsU0FBQSxVQUFBLElBQUE7TUFDQSxLQUFBLE1BQUEsb0JBQUE7Ozs7Q0FJQSxTQUFBLGFBQUEsV0FBQSxTQUFBOztFQUVBLElBQUEsUUFBQSxTQUFBO0dBQ0EsT0FBQSxVQUFBLElBQUE7U0FDQTtJQUNBLE9BQUEsVUFBQSxJQUFBOzs7Ozs7QUNuS0EsQ0FBQSxZQUFBO0VBQ0E7O0VBRUEsUUFBQSxPQUFBLDJCQUFBO0dBQ0EsT0FBQSxXQUFBO0dBQ0EsT0FBQSxTQUFBO0dBQ0EsT0FBQSxhQUFBOztFQUVBLFNBQUEsVUFBQTtJQUNBLE9BQUEsVUFBQSxLQUFBO01BQ0EsT0FBQSxDQUFBLE9BQUEsS0FBQSxLQUFBOzs7O0VBSUEsU0FBQSxRQUFBO0lBQ0EsT0FBQSxVQUFBLE1BQUE7TUFDQSxPQUFBLEtBQUEsUUFBQSxrQkFBQTs7OztFQUlBLFNBQUEsWUFBQTtJQUNBLE9BQUEsVUFBQSxNQUFBO01BQ0EsT0FBQTtXQUNBLFFBQUE7V0FDQSxLQUFBO1dBQ0E7Ozs7Ozs7Ozs7QUN0QkEsQ0FBQSxZQUFBO0VBQ0E7O0VBRUEsUUFBQSxPQUFBLG1CQUFBOzs7SUFHQTs7SUFFQTtJQUNBOzs7OztBQUtBIiwiZmlsZSI6Im5nLW1ldW1vYmktdXRpbHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHQubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMubG9hZGluZycsIFtdKVxuXHQuZmFjdG9yeSgnbG9hZGluZ0ludGVyY2VwdG9yJywgbG9hZGluZ0ludGVyY2VwdG9yKTtcblx0XG5cdGZ1bmN0aW9uIGxvYWRpbmdJbnRlcmNlcHRvcigkcSwgJHJvb3RTY29wZSwgJGxvZykge1xuXHRcdFxuXHRcdHZhciBudW1Mb2FkaW5ncyA9IDA7XG5cdFx0XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlcXVlc3Q6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICBpZiAoIW51bUxvYWRpbmdzKyspIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2xvYWRpbmc6c3RhcnQnKTtcbiAgICAgICAgfVxuXG5cdFx0XHRcdHJldHVybiBjb25maWcgfHwgJHEud2hlbihjb25maWcpO1xuXHRcdFx0fSxcblx0XHRcdHJlc3BvbnNlOiBmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdFx0XHRpZiAoISgtLW51bUxvYWRpbmdzKSkge1xuXHRcdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgnbG9hZGluZzpzdG9wJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UgfHwgJHEud2hlbihyZXNwb25zZSk7XG5cdFx0XHR9LFxuXHRcdFx0cmVxdWVzdEVycm9yOiBmdW5jdGlvbihyZXF1ZXN0KSB7XG5cdFx0XHRcdGlmICghKC0tbnVtTG9hZGluZ3MpKSB7XG5cdFx0XHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCdsb2FkaW5nOnN0b3AnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAkcS5yZWplY3QocmVxdWVzdCk7XG5cdFx0XHR9LFxuXHRcdFx0cmVzcG9uc2VFcnJvcjogZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRcdFx0aWYgKCEoLS1udW1Mb2FkaW5ncykpIHtcblx0XHRcdFx0XHQkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2xvYWRpbmc6c3RvcCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHQubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMuY2FsZW5kYXInLCBbXSlcblx0LmZhY3RvcnkoJ21ldUNhbGVuZGFyJywgWyckcScsICckd2luZG93JywgJ3N0cmlwdGFnc0ZpbHRlcicsICdicjJubEZpbHRlcicsIG1ldUNhbGVuZGFyXSk7XG4gIFxuICAvKlxuICAgIGNvcmRvdmEgcGx1Z2luIGFkZCBodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vQ2FsZW5kYXItUGhvbmVHYXAtUGx1Z2luLmdpdFxuICAgIElmIHN0YXJ0IGFuZCBlbmRfZGF0ZSBlcXVhbCAwMDowMCB0aGVuIHRoZSBldmVudCBvY2N1cnMgYWxsIGRheSBsb25nXG4gICovXG4gIFxuICBmdW5jdGlvbiBtZXVDYWxlbmRhcigkcSwgJHdpbmRvdywgc3RyaXB0YWdzLCBicjJubCkge1xuICAgIFxuICAgIHZhciBzZXJ2aWNlID0ge307XG4gICAgXG4gICAgc2VydmljZS5jcmVhdGVFdmVudEludGVyYWN0aXZlbHkgPSBjcmVhdGVFdmVudEludGVyYWN0aXZlbHk7XG4gICAgXG4gICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgXG4gICAgZnVuY3Rpb24gY3JlYXRlRXZlbnRJbnRlcmFjdGl2ZWx5KG9wdGlvbnMpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKSxcbiAgICAgICAgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgdGl0bGU6IG51bGwsXG4gICAgICAgICAgYWRkcmVzczogbnVsbCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgICAgc3RhcnRfZGF0ZTogbnVsbCxcbiAgICAgICAgICBlbmRfZGF0ZTogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgJHdpbmRvdy5wbHVnaW5zLmNhbGVuZGFyLmNyZWF0ZUV2ZW50SW50ZXJhY3RpdmVseShcbiAgICAgICAgc3RyaXB0YWdzKGRlZmF1bHRPcHRpb25zLnRpdGxlKSxcbiAgICAgICAgc3RyaXB0YWdzKGRlZmF1bHRPcHRpb25zLmFkZHJlc3MpLFxuICAgICAgICBzdHJpcHRhZ3MoYnIybmwoZGVmYXVsdE9wdGlvbnMuZGVzY3JpcHRpb24pKSxcbiAgICAgICAgbmV3IERhdGUoZGVmYXVsdE9wdGlvbnMuc3RhcnRfZGF0ZSAgKiAxMDAwKSxcbiAgICAgICAgbmV3IERhdGUoZGVmYXVsdE9wdGlvbnMuZW5kX2RhdGUgICogMTAwMCksXG4gICAgICAgIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgZC5yZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuICB9XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuICBcblx0YW5ndWxhclxuXHQubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMuYW5hbHl0aWNzJywgW10pXG5cdC5mYWN0b3J5KCdnb29nbGVBbmFseXRpY3NDb3Jkb3ZhJywgZ29vZ2xlQW5hbHl0aWNzQ29yZG92YSlcblx0LmZhY3RvcnkoJ2dvb2dsZUFuYWx5dGljcycsIGdvb2dsZUFuYWx5dGljcylcbiAgLmZhY3RvcnkoJyRjb3Jkb3ZhR29vZ2xlQW5hbHl0aWNzJywgJGNvcmRvdmFHb29nbGVBbmFseXRpY3MpXG5cdC5mYWN0b3J5KCdtZXVBbmFseXRpY3MnLCBtZXVBbmFseXRpY3MpO1xuICBcbiAgLypcbiAgICBJbnNwaXJlZCBieSBuZ0NvcmRvdmFcbiAgICBXZSd2ZSBleHRyYWN0ZWQgb25seSByZXF1aXJlZCBtZXRob2RzIFxuICBcbiAgICBpbnN0YWxsICAgOiAgICAgY29yZG92YSBwbHVnaW4gYWRkIGh0dHBzOi8vZ2l0aHViLmNvbS9kYW53aWxzb24vZ29vZ2xlLWFuYWx5dGljcy1wbHVnaW4uZ2l0XG4gICovXG5cbiAgZnVuY3Rpb24gJGNvcmRvdmFHb29nbGVBbmFseXRpY3MoJHEsICR3aW5kb3csICRsb2cpIHtcbiAgICBcbiAgICB2YXIgc2VydmljZSA9IHt9O1xuICAgIFxuICAgIHNlcnZpY2Uuc3RhcnRUcmFja2VyV2l0aElkID0gc3RhcnRUcmFja2VyV2l0aElkO1xuICAgIHNlcnZpY2UuZGVidWdNb2RlID0gZGVidWdNb2RlO1xuICAgIHNlcnZpY2UudHJhY2tWaWV3ID0gdHJhY2tWaWV3O1xuICAgIHNlcnZpY2UudHJhY2tFdmVudCA9IHRyYWNrRXZlbnQ7XG4gICAgc2VydmljZS5zZXRVc2VySWQgPSBzZXRVc2VySWQ7XG4gICAgXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICBmdW5jdGlvbiBzZXRVc2VySWQoaWQpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgJGxvZy5kZWJ1ZygnU2V0IFVzZXIgSWQ6ICcgKyBpZCk7XG4gICAgICBcbiAgICAgICR3aW5kb3cuYW5hbHl0aWNzLnNldFVzZXJJZChpZCwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRUcmFja2VyV2l0aElkKGlkKSB7XG4gICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICRsb2cuZGVidWcoJ1N0YXJ0IHRyYWNraW5nIEdBIElkOiAnICsgaWQpO1xuXG4gICAgICAkd2luZG93LmFuYWx5dGljcy5zdGFydFRyYWNrZXJXaXRoSWQoaWQsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlYnVnTW9kZSgpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgJHdpbmRvdy5hbmFseXRpY3MuZGVidWdNb2RlKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBkLnJlamVjdCgpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhY2tWaWV3KHNjcmVlbk5hbWUpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgIFxuICAgICAgJGxvZy5kZWJ1ZygnVHJhY2sgVmlldzogJyArIHNjcmVlbk5hbWUpO1xuICAgICAgXG4gICAgICAkd2luZG93LmFuYWx5dGljcy50cmFja1ZpZXcoc2NyZWVuTmFtZSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhY2tFdmVudChjYXRlZ29yeSwgYWN0aW9uLCBsYWJlbCwgdmFsdWUpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgdmFyIGV2ID0gW2NhdGVnb3J5LCBhY3Rpb24sIGxhYmVsLCB2YWx1ZV07XG4gICAgICAkbG9nLmRlYnVnKCdUcmFjayBFdmVudDogJyArIGV2LnRvU3RyaW5nKCkpO1xuICAgICAgXG4gICAgICAkd2luZG93LmFuYWx5dGljcy50cmFja0V2ZW50KGNhdGVnb3J5LCBhY3Rpb24sIGxhYmVsLCB2YWx1ZSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgfVxuICB9XG5cdFx0XG5cdGZ1bmN0aW9uIGdvb2dsZUFuYWx5dGljc0NvcmRvdmEoJGNvcmRvdmFHb29nbGVBbmFseXRpY3MsICRsb2cpIHtcbiAgICBcbiAgICB2YXIgc2VydmljZSA9IHt9O1xuICAgIFxuICAgIHNlcnZpY2UuaW5pdCA9IGluaXQ7XG4gICAgc2VydmljZS5kZWJ1Z01vZGUgPSAkY29yZG92YUdvb2dsZUFuYWx5dGljcy5kZWJ1Z01vZGU7XG4gICAgc2VydmljZS50cmFja1ZpZXcgPSAkY29yZG92YUdvb2dsZUFuYWx5dGljcy50cmFja1ZpZXc7XG4gICAgc2VydmljZS50cmFja0V2ZW50ID0gJGNvcmRvdmFHb29nbGVBbmFseXRpY3MudHJhY2tFdmVudDtcbiAgICBzZXJ2aWNlLnN0YXJ0VHJhY2tlcldpdGhJZCA9ICRjb3Jkb3ZhR29vZ2xlQW5hbHl0aWNzLnN0YXJ0VHJhY2tlcldpdGhJZDtcbiAgICBzZXJ2aWNlLnNldFVzZXJJZCA9ICRjb3Jkb3ZhR29vZ2xlQW5hbHl0aWNzLnNldFVzZXJJZDtcbiAgICBcbiAgICByZXR1cm4gc2VydmljZTtcbiAgICBcbiAgICBmdW5jdGlvbiBpbml0KHRyYWNrSWQpIHtcbiAgICAgICRjb3Jkb3ZhR29vZ2xlQW5hbHl0aWNzLnN0YXJ0VHJhY2tlcldpdGhJZCh0cmFja0lkKTtcbiAgICB9XG5cdH1cbiAgXG5cdGZ1bmN0aW9uIGdvb2dsZUFuYWx5dGljcygkbG9nLCAkcSkge1xuICAgIFxuICAgIHZhciBzZXJ2aWNlID0ge307XG4gICAgXG4gICAgc2VydmljZS5pbml0ID0gaW5pdDtcbiAgICBzZXJ2aWNlLmRlYnVnTW9kZSA9IGRlYnVnTW9kZTtcbiAgICBzZXJ2aWNlLnRyYWNrVmlldyA9IHRyYWNrVmlldztcbiAgICBzZXJ2aWNlLnRyYWNrRXZlbnQgPSB0cmFja0V2ZW50O1xuICAgIHNlcnZpY2Uuc3RhcnRUcmFja2VyV2l0aElkICA9IHN0YXJ0VHJhY2tlcldpdGhJZDtcbiAgICBzZXJ2aWNlLnNldFVzZXJJZCA9IHNldFVzZXJJZDtcbiAgICBcbiAgICByZXR1cm4gc2VydmljZTtcbiAgICBcbiAgICBmdW5jdGlvbiBpbml0KHRyYWNrSWQpIHtcbiAgICAgICRsb2cuZGVidWcoJ0dvb2dsZSBBbmFseXRpY3MgdHJhY2sgSWQ6ICcgKyB0cmFja0lkKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gZGVidWdNb2RlKCkge1xuICAgICAgJGxvZy5kZWJ1ZygnRW5hYmxlIERlYnVnJyk7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHRyYWNrVmlldyh0aXRsZSkge1xuICAgICAgJGxvZy5kZWJ1ZygnVHJhY2tpbmcgUGFnZTogJyArIHRpdGxlKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gdHJhY2tFdmVudChjYXRlZ29yeSwgYWN0aW9uLCBsYWJlbCwgdmFsdWUpIHtcbiAgICAgICRsb2cuZGVidWcoJ1RyYWNraW5nIEV2ZW50OiAnICsgYWN0aW9uKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gc3RhcnRUcmFja2VyV2l0aElkKGlkKSB7XG4gICAgICB2YXIgbXNnID0gJ1RyYWNraW5nIEdBIElkOiAnICsgaWQ7XG4gICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgIGQucmVzb2x2ZShtc2cpO1xuXG4gICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBzZXRVc2VySWQoaWQpIHtcbiAgICAgICRsb2cuZGVidWcoJ1RyYWNraW5nIFVzZXI6ICcgKyBpZCk7XG4gICAgfVxuXHR9XG4gIFxuXHRmdW5jdGlvbiBtZXVBbmFseXRpY3MoJGluamVjdG9yLCAkd2luZG93KSB7XG5cblx0XHRpZiAoJHdpbmRvdy5jb3Jkb3ZhKSB7XG5cdFx0XHRyZXR1cm4gJGluamVjdG9yLmdldCgnZ29vZ2xlQW5hbHl0aWNzQ29yZG92YScpO1xuXHRcdH0gZWxzZSB7XG5cdFx0ICByZXR1cm4gJGluamVjdG9yLmdldCgnZ29vZ2xlQW5hbHl0aWNzJyk7XG5cdFx0fVxuXHR9XG59KSgpOyIsIi8qIGdsb2JhbCBhbmd1bGFyICovXG4vKiBlc2xpbnQgbm8tdW5kZWY6IFwiZXJyb3JcIiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMuZmlsdGVycycsIFtdKVxuICAuZmlsdGVyKCdpc0VtcHR5JywgaXNFbXB0eSlcbiAgLmZpbHRlcignYnIybmwnLCBicjJubClcbiAgLmZpbHRlcignc3RyaXB0YWdzJywgc3RyaXB0YWdzKTtcblxuICBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gIU9iamVjdC5rZXlzKG9iaikubGVuZ3RoO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBicjJubCgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoLzxiclxccypbXFwvXT8+L2dpLCAnXFxuJyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmlwdGFncygpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgIHJldHVybiBhbmd1bGFyXG4gICAgICAgICAgLmVsZW1lbnQoJzxkaXYvPicpXG4gICAgICAgICAgLmh0bWwodGV4dClcbiAgICAgICAgICAudGV4dCgpO1xuICAgIH07XG4gIH1cbn0pKCk7XG4iLCIvKiBnbG9iYWwgYW5ndWxhciAqL1xuLyogZXNsaW50IG5vLXVuZGVmOiBcImVycm9yXCIgKi9cbi8qXG4gIFRPRE86IHNob3VsZCByZWxlYXNlIG1pbmlmaWVkICgubWluLmpzKSBhbmQgbm90ICguanMpXG4qL1xuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCduZ01ldW1vYmkuVXRpbHMnLCBbXG4gICAgLy8nbmdNZXVtb2JpLlV0aWxzLmZpbGVzJyxcbiAgICAvLyduZ01ldW1vYmkuVXRpbHMuYXBpJyxcbiAgICAnbmdNZXVtb2JpLlV0aWxzLmxvYWRpbmcnLFxuICAgIC8vJ25nTWV1bW9iaS5VdGlscy5jb25uZWN0aW9uJyxcbiAgICAnbmdNZXVtb2JpLlV0aWxzLmNhbGVuZGFyJyxcbiAgICAnbmdNZXVtb2JpLlV0aWxzLmFuYWx5dGljcycsXG4gICAgLy8nbmdNZXVtb2JpLlV0aWxzLmZpbHRlcnMnXG4gIF0pO1xuICBcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
